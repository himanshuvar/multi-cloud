// Copyright 2020 The OpenSDS Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

service Block {
    rpc ListVolume(ListVolumeRequest) returns (ListVolumeResponse) {}
    rpc GetVolume(GetVolumeRequest) returns (GetVolumeResponse) {}
    rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse) {}
    rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse) {}
}

message Volume {
    //The uuid of the volume.
    string id = 1;
    // The name of the volume.
    string  name = 2;
    // The description of the volume.
    string  description =3;
    // The uuid of the project that the volume belongs to.
    string tenantId = 4;
    // The uuid of the user that the volume belongs to.
    string userId = 5;
    // The uuid of the backend that the volume belongs to.
    string backendId = 6;
    // The uuid of the snapshot which the volume is created
    string snapshotId = 7;
    // The size of the volume requested by the user.
    int64   size = 8;
    // The type of the volume.
    string  type = 9;
    // The location that volume belongs to.
    string  region = 10;
    // The locality that volume belongs to.
    string  availabilityZone = 11;
    // The status of the volume.
    string  status = 12;
    // Any tags assigned to the volume.
    map<string, string> tags = 13;
    // Indicates whether Multi-Attach is enabled.
    bool    multiAttachEnabled = 14;
    // Indicates whether the volume is encrypted.
    bool    encrypted = 15;
    // EncryptionSettings that was used to protect the volume encryption.
    map<string, string> encryptionSettings = 16;
    // Metadata should be kept until the semantics between volume and backend storage resource.
    map<string, string> metadata = 17;
}

message AccessInfo {
    string access = 1;
    string security = 2;
    string region = 3;
}

message ListVolumeRequest {
    int32 limit = 1;
    int32 offset = 2;
    repeated string sortKeys = 3;
    repeated string sortDirs = 4;
    map<string, string> Filter = 5;
}

message ListVolumeResponse {
    repeated Volume volumes = 1;
    int32 next = 2;
}

message GetVolumeRequest {
    string id = 1;
}

message GetVolumeResponse {
    Volume volume = 1;
}

message CreateVolumeRequest {
    Volume volume = 1;
    AccessInfo accessInfo = 2;
}

message CreateVolumeResponse {
    Volume volume = 1;
}

message DeleteVolumeRequest {
    string id = 1;
}

message DeleteVolumeResponse {
}
